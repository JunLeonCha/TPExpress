<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
  <script src="/socket.io/socket.io.js"></script>
  <link rel="stylesheet" href="../../css/site.css">
</head>
<section id="chat">
      <!-- Button trigger modal -->
<button id="btn-login" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
  Se connecter
</button>
  <div>
    <ul id="users">
      <h6>Liste des utilisateurs</h6>
    </ul>
    <ul id="messages"></ul>
  </div>
  <div id="input-message" style="display: none;">
    <form id="form" action="">
      <input id="m" class="input" autocomplete="off" /><button>Envoyer</button>
      <input id="date" class="input" type="hidden" value="" />
    </form>
  </div>
</section>

<section id="login">
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form action="">
        <div class="modal-body">
          <label for="u">Pseudo</label>
          <input id="u" autocomplete="off" autofocus />
        </div>
        <div class="modal-footer">
          <button id="submit-username" type="submit" class="btn btn-primary" data-bs-dismiss="modal" aria-label="Close">Save changes</button>
        </div>
      </form>
    </div>
  </div>
</div>
</section>

<script async>
  let socket = io();
  let i;

  function scrollToBottom() {
    const windowHeight = window.innerHeight;
    const scrollTop = window.scrollY || window.pageYOffset;
    const lastMessage = document.querySelector("#messages li:last-of-type");
    const lastMessageHeight = lastMessage.offsetHeight;
    const documentHeight = Math.max(
      document.body.scrollHeight,
      document.body.offsetHeight,
      document.documentElement.clientHeight,
      document.documentElement.scrollHeight,
      document.documentElement.offsetHeight
    );
    if (
      scrollTop + windowHeight + 2 * lastMessageHeight >=
      documentHeight
    ) {
      window.scrollTo({ top: documentHeight, behavior: "smooth" });
    }
  }

  const loginForm = document.querySelector("#login form");
  const displayBtnLogin = document.getElementById("btn-login");
  const displayMessage = document.getElementById("input-message");
  loginForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const usernameInput = document.querySelector("#login input");
    const username = usernameInput.value.trim();
    if (username.length > 0) {
      const user = { username: username };
      socket.emit("user-login", user, function (success) {
        if (success) {
          document.body.removeAttribute("id");
          document.querySelector("#chat input").focus();
          console.log(displayBtnLogin)
          displayMessage.style.display = "block"
          displayBtnLogin.style.display = "none"
          
        }
      });
    }
  });

  const chatForm = document.querySelector("#chat form");
  chatForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const messageInput = document.querySelector("#m");
    const messageText = messageInput.value.trim();
    const message = {
      text: messageText,
      date: new Date(),
    };
    messageInput.value = "";
    if (messageText.length !== 0) {
      socket.emit("chat-message", message);
    }
    document.querySelector("#chat input").focus();
  });

  socket.on("chat-message", function (message) {
    const date = new Date(message.date);
    const formattedDate = date.toLocaleString();
    const messageElement = document.createElement("li");
    messageElement.innerHTML =`<span class="username"> ${message.username}</span>
      <span class="chat-date">(${formattedDate})</span> : 
      <span class="chat-message">${message.text}</span>`;
    document.querySelector("#messages").appendChild(messageElement);
    scrollToBottom();
  });
 
  socket.on("service-message", function (message) {
    let li = document.createElement("li");
    li.classList.add(message.type);
    let span = document.createElement("span");
    span.classList.add("info");
    span.innerHTML = "<strong>SERVER</strong>";
    li.appendChild(span);
    li.innerHTML += " " + message.text;
    document.getElementById("messages").appendChild(li);
    scrollToBottom();
  });

  socket.on("user-login", function (user) {
    let li = document.createElement("li");
    li.classList.add(user.username, "new");
    li.innerHTML = user.username;
    document.getElementById("users").appendChild(li);
    setTimeout(function () {
      document.querySelector("#users li.new").classList.remove("new");
    }, 1000);
  });

  socket.on("user-logout", function (user) {
    let selector = "#users li." + user.username;
    let element = document.querySelector(selector);
    element.parentNode.removeChild(element);
  });

  let typingTimer;
  let isTyping = false;
  document.getElementById("m").addEventListener("keypress", function () {
    clearTimeout(typingTimer);
    if (!isTyping) {
      socket.emit("start-typing");
      isTyping = true;
    }
  });
  document.getElementById("m").addEventListener("keyup", function () {
    clearTimeout(typingTimer);
    typingTimer = setTimeout(function () {
      if (isTyping) {
        socket.emit("stop-typing");
        isTyping = false;
      }
    }, 500);
  });

  socket.on("update-typing", function (typingUsers) {
    let typingSpans = document.querySelectorAll("#users li span.typing");
    typingSpans.forEach(function (span) {
      span.style.display = "none";
    });
    typingUsers.forEach(function (user) {
      let selector = "#users li." + user.username + " span.typing";
      let typingSpan = document.querySelector(selector);
      if (typingSpan) {
        typingSpan.style.display = "inline";
      }
    });
  });
</script>
